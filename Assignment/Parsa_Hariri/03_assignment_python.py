# -*- coding: utf-8 -*-
"""Copy of 03_Assignment_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X8eHgoHB1RYp3dqaPvLVHgKWD86IVlX5

# Assignment 03
#### Python Basics III - Functions and Classes

This tutorial was written by Terry L. Ruas (University of Göttingen). The references for external contributors for which this material was anyhow adapted/inspired are in the Acknowledgments section (end of the document).

This notebook will cover the following tasks:

1. Dictionary
2. Classes

```
# This is formatted as code
```
Imagine you have to write a (very simple) bookkeepingsystem for a bank that keeps track of the account balances of each of its customers.
1. Write a function that spans a dictionary holding a default balance of 0 for an initial list of customers. For simplicity, assume customer names are unique identifier.  (optional) Can you express that same functionality using a lambda function?
2. What are elegant ways to add or remove single and multiple customers using the functionality of dict?
use append and other functions
3. Now write two simple functions that allow you to deposit and withdraw money for a given bank customer.
4. Include error messages for inputs that are not permissible, e.g., withdrawing negative amounts or overdrawing the account, etc.
"""

def dic_intiaion(names_list):
  dic = {}
  for name in names_list:
    dic[name] = 0
  return dic
print(dic_intiaion(['a','aa','aaa','aaaa']))

names_list = ['a','aa','aaa','aaaa']
dic = dict((x, 0) for x in names_list)
print(dic)

def deposit(name , mon,dic):
  if mon < 0:
    return "ERROR money can not be negative"
  dic[name] += mon
def withdraw(name , mon,dic):
  if mon < 0:
    return "ERROR money can not be negative"
  elif dic[name] <  mon:
    return "You do not have enugh money"
  dic[name] -= mon

"""## Task 02 – Classes
The manager thinks that the simple bookkeeping system you have built is not powerful enough. She requests that you start from scratch and use classes instead.
1. Write a simple class with appropriate constructor *\_\_init\_\_* that initializes an object of class *Customer* tracking the same information as in Task 01.
2. Now write two simple methods for class *Customer* that allow you to deposit and withdraw money for a given customer object.
3. Include error messages for inputs that are not permissible, e.g., withdrawing negative amounts or overdrawing the account.
4. (Inheritance) Write a child class *SavingsCustomer* that inherits its features from the parent class *Customer*. A savings customer has an extra savings balance for receiving extra interest. The class should have a method to transfer money back and forth between the accounts' main balance as well as the savings balance. Do not forget to add reasonable error messages.
"""

from __future__ import print_function
class Customers:
  def __init__(self,money):
    self.money = money
  def deposit(self , mon):
    if mon < 0:
      print("ERROR money can not be negative")
    else:
      self.money += mon
  def withdraw(self , mon):
    if mon < 0:
      print("ERROR money can not be negative")
    elif self.money <  mon:
      print("You do not have enugh money")
    else:
      self.money -= mon
a = Customers(10)
a.deposit(100)
print(a.money)
a.withdraw(300)
print(a.money)